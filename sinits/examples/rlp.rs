#![feature(lang_items)]
#![feature(asm)]
#![feature(const_fn)]
#![feature(unique)]
#![feature(alloc)]
#![no_std]

#[macro_use]
extern crate system;
extern crate spin;
extern crate selfalloc;
extern crate alloc;
extern crate sputnikvm;

use alloc::str::FromStr;

use system::{CAddr};
use sputnikvm::bigint::H256;
use sputnikvm::rlp::Rlp;
use sputnikvm::hexutil::*;

#[lang="start"]
#[no_mangle]
fn start(_argc: isize, _argv: *const *const u8) {
    unsafe { system::set_task_buffer_addr(0x90001000); }
    unsafe { selfalloc::setup_allocator(CAddr::from(2), CAddr::from(3), 0x1000000000); }

    let raw = read_hex("f90219f90214a00000000000000000000000000000000000000000000000000000000000000000a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a0d7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421ba011bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82faa00000000000000000000000000000000000000000000000000000000000000000880000000000000042c0c0").unwrap();
    let block_raw = Rlp::new(&raw);

    let parent_hash = H256::from_str("0x0000000000000000000000000000000000000000000000000000000000000000").unwrap();

    if parent_hash == block_raw.at(0).val_at::<H256>(0) {
        system::debug_test_succeed();
    } else {
        system::debug_test_fail();
    }
}
